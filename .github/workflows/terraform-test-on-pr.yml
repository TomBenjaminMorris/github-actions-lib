name: "Terraform: Test on PR open"

on:
  workflow_call:
    inputs:
        aws-default-region:
            description: "AWS region"
            required: true
            type: string
        tf-aws-role:
            description: "TF role to assume"
            required: true
            type: string
        tf-version:
            description: "TF version to use"
            required: true
            type: string

jobs:
  terraform:
    name: "Validate and Plan"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: "Setup: checkout"
        uses: actions/checkout@v4
        with:
            persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
            git config --global url."https://github.com/".insteadOf
            ssh://git@github.com/

      - name: "Setup: Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.tf-aws-role }}
          role-session-name: github-actions-terraform
          role-duration-seconds: 900
          aws-region: ${{ inputs.aws-default-region }}

      - name: "Test: Terraform fmt"
        id: fmt
        run: terraform fmt -check -no-color
        continue-on-error: true

      - name: "Setup: TFLint"
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.48.0

      - name: "Test: Terraform linter"
        run: tflint --init && tflint -f compact
        shell: bash

      - name: "Setup: Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: ${{ inputs.tf-version }}

      - name: "Test: Terraform Init"
        id: init
        run: terraform init -no-color

      - name: "Test: Terraform Validate"
        id: validate
        run: terraform validate -no-color

      - name: "Test: Terraform Plan"
        id: plan
        run: terraform plan -no-color

      - name: "Misc: Post Terraform summary to PR"
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
            PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                <details><summary>Validation Output</summary>
            
                \`\`\`\n
                ${{ steps.validate.outputs.stdout }}
                \`\`\`
            
                </details>
            
                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
                <details><summary>Show Plan</summary>
            
                \`\`\`\n
                ${process.env.PLAN}
                \`\`\`
            
                </details>
            
                *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
                github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                })